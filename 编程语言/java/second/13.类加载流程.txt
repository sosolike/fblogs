1.类的加载机制：
    java代码(.java文件)运行时必须先通过编译器编译为字节码指令文件(.class文件)，编译时会为.java文件中的每个类生成一个.class文件：
        如果一个.java文件中只有一个类，那么编译之后得到一个.class文件；
        如果一个.java文件中有多个类，编译之后将会生成多个.class文件；
    如下使用`javac`编译User.java文件之后将会生成3个class文件，分别是：User.class、A.class、B.class
    <img>
    编译之后的class字节码指令文件仍然只是存在于磁盘上代码文件，只有将这些字节码指令加载到内存中才能够被JVM运行；
    因此，类的加载机制就是将编译之后的class文件加载至JVM内存中的过程称；
2.类的加载过程流程：
    1.类的加载流程：
        类的加载流程分为5个阶段,分别如下：
            装载->验证->准备->解析->初始化
        其中，验证->准备->解析又统一称为链接阶段
    2.装载阶段：
        装载阶段是指将磁盘、网络、数据库等其它来源的字节码指令文件以二进制的形式读取到JVM内存中的过程；
        装载阶段主要完成以下三部分内容：
            1.通过一个类的全限定名称来获取定义此类的二进制字节流；
                jvm仅规定了如何找到一个class文件，即按照类的全限定名称来查找该类，但是并未规定表示class文件的二进制字节流的来源；因此class文件本身可以来自磁盘、网络、数据库、动态生成等等；
            2.将字节流所代表的静态存储结构转化为方法区的运行时数据结构；

            3.在内存中创建一个代表该类的java.lang.class对象，该对象中存储着类的所有原始信息；作为类信息的访问入口；


        