一：python中代码组织结构：python中使用包、模块的方式组织代码；
    |--包
        |--模块
        |--包
            |--模块
            |--包
    1：关于结构，包对应的是文件系统中的目录，模块对应的是python文件；上述结构和文件系统相同：目录中存放子目录和文件，子目录中又可以存放子目录和文件；
    2：关于包和模块：
        1：在python2中，并非所有的目录都是包：
            1：python2.x中将__init__.py文件作为包的标识，目录中有__init__.py文件才能认为该目录是一个包，同时该目录中的python文件才会被认为是模块；
            2：当前执行脚本所在的目录也会被当做一个包来看待，其中的python文件同样会看做是模块；
            3：python2.x中只有包中的模块才能被其他python文件导入，普通的目录中的python文件是无法被导入的；
        3：在python3.3中：
            1：__init__.py文件不是必须的；无论是否有__init__.py，项目中的目录都会被当做包；其python文件也会被当做模块；
    3：关于__init__.py文件：
        1：在python2.x中是包的标识，目录中有__init__.py时，该目录才会被作为包；否则只是普通的目录；
        2：用来对包中的模块进行初始化操作，在导入包中的模块时，会优先执行__init__.py文件中的代码；

python中的模块：
    python中，模块即指python源文件，一个python文件即称之为一个模块；

    模块的意义：
        1：方便代码的组织管理，查找维护；
        2：能够产生作用域，可以避免标识符重名带来问题；
    
    模块的名称：
        1：每一个模块都会有一个__name__属性，该属性表示模块的名称；
        2：在导入模块时，模块的名称为python文件的文件名，即__name__的值为对应python文件名；
        3：在当做可执行文件执行时，其名称为__main__,即__name__的值为__main__；

    模块的导入方式：
        #导入整个模块
        import ModuleName
            备注：
            1：默认将会导入模块中定义的所有变量、函数、类，也可以使用__all__变量来设置模块中能够直接导出的内容；
            2：以这种方式导入模块时，模块中的函数、全局变量、类需要使用 ModuleName.name 来访问

        #导入模块中指定的内容
        from ModuleName import name
            备注：
            1：以这种方式导入模块时，仅能从模块中导入指定的内容；
            2：模块中已经导入的函数、全局变量、类可直接使用被导入成员的名称来访问

        #导入模块中的所有内容，
        from ModuleName mport *
            备注：
            1：以这种方式导入模块时，默认将会导入模块中定义的所有变量、函数、类，也可以使用__all__变量来设置模块中能够直接导出的内容；__all__的值为一个list，存放可以直接导出的内容；
            2：只有在__all__变量中设置的内容才能够直接使用该方式直接导入，否则需要使用第一和第二种方式导入；
            3：模块中已经导入的函数、全局变量、类可以直接使用被导入成员的名称来访问；

    模块导入注意事项：
            1：模块只会导入一次，无论导入多少次，模块中的内容只会在第一次导入
            2：所有的python文件都应该是可导入的，即python文件中的可执行内容务必在 __name__ == "__main__" 时执行；避免因为误导入而造成未知错误；
        
    模块的导入路径：
        1：首先会在当前包中(即：当前执行脚本所在的目录)或者指定包路径中查找模块;
        2：如果当前包或者指定包路径中未找到指定模块，将会从内置的built-in模块中查找；
        3：如果在built-in模块中也未找到，将会从系统环境变量中配置的路径中查找；
        4：如果上述三个方式都未找到将会报ModuleNotFoundError异常；
        5：除此之外，还可以手动添加模块路径：
            import sys
            sys.path.append("模块所在路径")
            import 模块名
        6：在项目起始文件中推荐以下方式设置项目中自定义模块起始路径：
            import sys,os
            propath = os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(__file__)),"."))
            sys.path.append(propath)
            设置完成后，当前项目中自定义的模块都需要以设置的路径为起始路径导入；
    
    模块的初始化：
        1：模块中可以包含可执行语句，在python作为模块导入时执行，即__name__ != "__main__"时执行；但是无论模块被导入多少次，该可执行语句仅执行一次；

python中的包：
    包在文件系统中即为目录，一个目录称之为一个包；包中包含模块和其他的包；

    包的意义：
        1：方便对模块进行组织管理，查找维护；
        2：能够产生作用域，防止不同模块的同名标识符冲突；

    通过包名导入模块：
        #直接导入包中的模块
        import pack1.pack2.pack3.模块名 
            备注：通过该方式导入的模块，访问模块中成员时需要使用全路径来访问：如：pack1.pack2.pack3.模块名.func_name
        
        #导入包中的指定模块
        from pack1.pack2 import 模块名
            备注：通过该方式导入的模块，访问模块中成员时需要使用模块名来访问：模块名.func_name

        #导入包中指定模块的指定成员
        from pack1.pack2.模块名 import fun
            备注：通过该方式导入的模块，访问模块中成员时可以直接使用成员名来访问：func_name
        
        #导入模块中的所有包：
        from pack1.pack2 import *
            备注：1：通过该方式导入模块时默认会导入包中所有的模块；也可通过在__init__.py文件中添加__all__变量来限制该方式能够导入的模块；
                 2：建议不要使用该方式导入包中模块，而是按需导入；
    包的初始化：
        无论是python2.x版本还是python3.x版本都可以在包中添加__init__.py文件来对包进行初始化，__init__.py文件中的代码会在导入包中模块的时候执行；

为导入项设置别名：
    导入的包名，模块名，模块中的成员名，均可使用 as 来创建别名；如：
      from pack1.pack2.模块名 import fun as func   #在使用时即可通过func()来调用模块中的fun函数  
    如果被导入内容名称过长，推荐使用as来设置较短的别名；

重新加载模块内容：
    由于模块一旦导入，后续的再次导入只是增加对已导入模块的引用，并不会重新加载模块内容，因此，如果需要重新加载模块内容时可以使用reload()函数重新加载模块；如：
        from package import module_name

        #需要重新加载模块内容时：
        reload(module_name)

python中导入模块的注意事项：
    1：尽量按需导入，避免导入模块中所有的内容；
    2：尽量避免模块的嵌套导入问题；两个模块互相导入时将会出错，应该避免；
    3：对于有较多自定义模块的项目，推荐在起始文件中设置自定义模块的导入起始路径；