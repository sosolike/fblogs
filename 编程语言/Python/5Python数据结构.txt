一：Python内置数据结构：
    1：列表：list：一个可以存储任意数据类型数据的线性表，是个可变对象；符号为[]； 如：[1,2,3,4]；
        1：列表特征：
            1：列表中的元素可以是任意数据类型的数据，但只能是值本身，不能存储k-v键值对；
            2：列表中的元素默认按照存储顺序排序；从左向右序号从0开始计数，从右向左序号从-1开始计数；
            3：list在python中是可变对象；列表中的元素可以任意增加、修改或者删除；
        2：创建列表：
            1：通过[]创建列表：
                1：lista = []    #创建空列表
                2：lista =[1,2,3]    #创建有元素的列表
            2：通过列表生成式创建列表：
                1：lista = [表达式 for 变量 in 列表]    #列表生成式生成列表，如：[i+1 for i in range(10)]
                2：lista = [表达式 for 变量 in 列表 if 表达式]    #带条件的列表生成式生成列表，如：[i*2 for i in range(5) if i%2==0 ]
            3：将其他数据类型转换为列表：
                1：lista = list(tuple)    #将tuple类型的数据转换为list类型，如：list((1,2,3,4))
                2：dict_name.keys()    #将字典的key提取为一个列表
                3：dict_name.values()    #将字典的值提取为一个列表
        3：列表的元素操作：
            列表元素操作：
                1：获取元素值：list_name[idnex]    
                    #如：list_name = [1,2,3,4]  list_name[0]:1
                2：设置元素值：list_name[index]    
                    #如：list_name = [1,2,3,4]  list_name[0]=4:[4,2,3,4]
                3：插入元素值：list_name.insert(index,obj)    
                    #如：list_name = [1,2,3,4]  list_name.insert(0,5):[5,1,2,3,4]
                4：追加元素值：list_name.append(obj)    
                    #如：list_name = [1,2,3,4]  list_name.append(5):[1,2,3,4,5]
                5：移除元素值(默认是最后一个)：list_name.pop([index=-1])    
                    #如：list_name = [1,2,3,4]  list_name.pop():[1,2,3]
                6：移除第一个匹配到的元素：list_name.remove(obj)   
                    #如：list_name = [1,2,3,4,3]  list_name.remove(3):[1,2,4,3]
                7：统计列表中元素的出现的个数：list_name.count(obj)    
                    #如：list_name = [1,2,3,3,3,3]  list_name.count(3):4
                8：返回元素第一次出现时的索引：list_name.index(obj)    
                    #如：list_name = [1,2,3,3]  list_name.index(3):2
                9：返回列表中的最大值：max(list_name)    
                    #如：list_name = [1,2,3]   max(list_name):3
                10：返回列表中的最小值：min(list_name)    
                    #如：list_name = [1,2,3]  min(list_name):1

            列表其他操作：
                1：获取列表长度：len(list_name)    
                    #如：list_name = [1,2,3]  len(list_name):3
                2：反向列表中的元素：list_name.reverse()  
                    #如：list_name = [1,2,3]  list_name.reverse(list_name):[3,2,1]
                3：合并两个list：list1+list2(避免使用list1+=list2)
                    #如：list1=[1,2]  list2=[3,4] list1+list2:[1,2,3,4]
                4：重复list:list1*n,n是重复次数
                    #如：list1 = [1,2]  list1*2:[1,2,1,2]
                5：检测元素是否在列表中：in
                    #如：list1=[1,2]  1 in list1:True
                6：检测元素是否不在列表中：not in
                    #如：list1=[1,2]  1 not in list1:False
                7：使用连接符连接list中的元素：join(list_name) ;使用join()函数连接list时，list中的元素必须都为str类型，否则将会有TypeError异常；
                    #如：list_name = ['a','b','c']  "-".join(list_name):"a-b-c"
                8：元祖本身也支持切片操作：切片操作之后仍然返回一个tuple对象
                    #如：list_name[pos]、list_name[start:]、list_name[start:end]、list_name[:end]、list_name[start:end:step]

        4：列表的迭代：
            for item in list_name:
                #item为列表中的元素
            或者：
            for (index,item) in enumerate(list_name):
                #index为索引，item为列表中的值

        5：异常：访问列表中的元素要特别注意不要出现元素索引越界；否则将会报IndexError;

    2：元祖：tuple：一个可以存储任意数据类型数据的线性表，是个不可变对象；符号为()；如:(1,2,3)；
        1：元祖的特征：
            1：列表中的元素可以是任意数据类型的数据，但只能是值本身，不能存储k-v键值对；
            2：列表中的元素默认按照存储顺序排序；从左向右序号从0开始计数，从右向左序号从-1开始计数；
            3：tuple和list不同之处在于，tuple是不可变对象，tuple中的元素一旦确定，将不能再增加、删除、修改元素(元素本身是可变对象时可以修改)；
        
        2：元祖的创建：
            1：通过()创建元祖：
                1：tuplea = (,) 或者(1,2)   #创建一个空元祖或者只有一个元素的元祖时，必须在()中加一个 ',' ；否则将会把()当做运算符号来对待;如:(1,)或者(,)
            2：将list转换为元祖：
                1：tuplea = tuple([])    #将一个list转换为tuple,tuple([1,2]):(1,2)；
            3：因为能够将list转换为元祖，因此可以通过列表生成式来创建元祖：
                1：tuplea = tuple(表达式 for 变量 in 列表)    #使用list表达式创建tuple；
                2：tuplea = tuple(表达式 for 变量 in 列表 if 表达式)    #使用list表达式创建tuple；
        
        3：元祖元素的操作：
            1：元祖的基本操作：
                1：获取元祖中的元素：tuplea[index]
                    #如：tuplea = (1,2,3)  tuplea[1]:2
                2：统计列表中元素的出现的个数：tuplea.count(obj)    
                    #如：tuplea = (1,2,3,3,3,3)  tuplea.count(3):4
                3：返回元素第一次出现时的索引：tuplea.index(obj)    
                    #如：tuplea = (1,2,3,3)  tuplea.index(3):2
                4：返回元祖中的最大值：max(tuplea)    
                    #如：tuplea = (1,2,3)  max(tuplea):3
                5：返回元祖中的最小值：min(tuplea)    
                    #如：tuplea = (1,2,3)  min(tuplea):1
                6：tuple中不能修改、新增、删除元素，除非元素本身是可变对象；
        
            2：元祖其他操作：
                1：获取元祖长度：len(tuplea)    
                        #如：tuplea = (1,2,3)  len(tuplea):3
                2：合并两个tuple：tuple1+tuple2    
                        #如：tuple1=(1,2)  tuple2=(3,4) tuple1+tuple2:(1,2,3,4)
                3：重复tuple:tuple1*n,n是重复次数
                    #如：tuple1 = (1,2)  tuple1*2:(1,2,1,2)
                4：检测元素是否在元祖中：in
                    #如：tuple1=(1,2)  1 in tuple1:True
                5：检测元素是否不在元祖中：not in
                    #如：tuple1=(1,2)  1 not in tuple1:False
                6：使用连接符连接tuple中的元素：join(tuple) ;使用join()函数连接tuple时，tuple中的元素必须都为str类型，否则将会有TypeError异常；
                    #如：tuple = ('a','b','c')  "-".join(tuple):"a-b-c"
                7：元祖本身也支持切片操作：切片操作之后仍然返回一个tuple对象
                    #如：tuplea[pos]、tuplea[start:]、tuplea[start:end]、tuplea[:end]、tuplea[start:end:step]
        
        5：元祖的迭代：
            for item in tuple_name:
                #x为元祖中的元素

            for (index,item) in tuple_name:
                #index为元祖中的索引
                #i为元祖中的值
        
        6：异常：访问元祖中的元素要特别注意不要出现元素索引越界；否则将会报IndexError;

    3：字典：dict,用来存放键值对的数据结构；符号为{};如：{'name':'tom','age':23}
        1：字典的特征：
            1：字典中存储键值对，而非单个值；其中键名可以为字符串、数字、元祖等不可变对象，但是不可修改，不可重复；键值可以为任何数据类型的数据；
            2：python2.x版本中，dict中的键值对默认无序；python3.x版本中，dict中的键值对默认有序，按照存入顺序排序；
            3：字典在python中是可变对象；字典中可以任意添加、删除以及修改键值；
        
        2：创建字典：
            1：dicta = {}    #创建一个空的字典;
            2：dicta = {'key':value}    #创建有键值对的字典；

        3：字典的相关操作：
            1：获取键值：
                dict_name['key']    #键名不存在将会报KeyError，使用该方式获取键值时务必处理KeyError异常；
            2：获取键的值，不在则返回默认值：
                dict_name.get(key,default=None)    #获取键值时推荐使用get方法，无需处理KeyError异常，没有给定默认值时返回None；
            3：检测键名是否在字典中：
                dict_name.has(key)    #如果存在则返回True，不存在则返回False
                在条件表达式中也可以使用int 和 not in来检测键名是否在字典中：
                    key in dict_name  或者 key not in dict_name
            4：返回字典中所有的键名：
                dict_name.keys()    #返回值是所有key组成的list
            5：返回字典中所有的键值：
                dict_name.values()    #返回值是所有value组成的list
            6：返回字典中所有的键值对：
                dict_name.items()     #返回值是由键名和键值组成的tuple构成的list
            7：删除字典中的key,并把key的值返回,如果未给定key则返回default：
                dict_name.pop(key,default)
            8：随机删除并返回字典中的键值对：
                dict_name.popitem()
            9：删除字典内所有元素：
                dict_name.clear()
            10：获取字典键值对个数：len(dict_name)

    4：集合：set;可以存放多种不同数据类型的数据，存放值本身，无序且不可重复;
        1：集合的特征：
            1：集合中可以存储任意数据类型的数据，且数据无序，不可重复，具备自动去重的能力；
            2：集合可以任意添加、删除元素；
            3：只能存储数据本身；
        
        2：集合的创建：
            1：创建空集合：set()    #空集合只能使用set()函数来创建  如：set()
            2：创建非空集合：set() 或者 {}    #只有在创建非空集合时才能使用{},如：set([1,2,3,4])或者{1,2,3,4}
        
        3：集合的操作：
            1：添加元素：add(obj)
                #如：s.add(1)
            
            2：移除元素：remove(obj)
                #如：s.remove(1)，如果被移除的元素不在集合中将会报异常KeyError；
            
            3：移除一个元素：discard(obj)
                #如s.discard(1),和remove不同，被移除元素不在集合中时不会报告异常,不做任何处理；
            
            4：随机移除元素：pop()
                #如：s.pop()
            
            5：删除集合中所有的元素：clear()
                #如：s.clear()
            
            6：返回x集合和其他集合的并集：union()
                #如：x.union(set1,set2,...)
            
            7：返回x集合和其他集合的交集：intersection()
                #如：x.intersection(set1,set2,...)
            
            8：返回x集合和y集合的差集：difference()
                #如：x.difference(y)  返回x集合中有，但是y集合中没有的元素
            
            9：检测两个集合是否包含相同的元素，如果有返回True,否则返回False:isdisjoint(set)
                #如：s.isdisjoint(set)
            
            10：检测x是否是y的子集：issubset()
                x = {"a", "b", "c"}
                y = {"f", "e", "d", "c", "b", "a"}
                #如：x.issubset(y)  返回True
            
            11：检测x是否是y的父集：issuperset()
                #如：
                    x = {"f", "e", "d", "c", "b", "a"}
                    y = {"a", "b", "c"}
                    x.issuperset(y)  返回True
            12：获取集合中的元素个数：
                len(set_name)
            
            13：检测元素是否在集合中:
                data in set_name
                或者:
                data not in set_name

二：Python扩展数据结构：collections
    1：具名元祖：namedtuple：元祖中的每一个元素均有名称；
        使用流程：
            1：导入namedtuple：
                from collections import namedtuple

            2：创建namedtuple实例：
                name_tuple = namedtuple(tuplename,field_names,verbose,rename=False)
                功能：创建namedtuple实例的过程即是创建namedtuple结构的过程，包括该namedtuple中将要存放的元素个数以及每一个元素的名称
                参数：tuplename：具名元祖名称；
                     field_names：每一个元素的名称，多个元素的名称之间使用空格隔开；如："name age id"；
                     rename：如果字段名称中有包含python关键字，该参数必须设置为True；否则默认为False即可；
                     verbose：保持默认即可；
                Stuff  = namedtuple('stuff',"name age id")

            3：使用namedtuple：使用namedtuple即是通过创建好的namedtuple实例对象来存储具体数据的过程：示例：
                stuff_tom = Stuff("tom",23,1)
            
            4：操作namedtuple中的元素：
                1：访问元素值：
                    1：通过名称来访问元素：namedtuple_name.field_name；示例：stuff_tom.name    # "tom"
                    2：通过元素索引来访问元素：namedtuple_name[index]；示例：stuff_tom[1]    # 23
                2：其余操作和tuple一致：如：
                    1：统计列表中元素的出现的个数：ntuple.count(obj)    
                        #如：ntuple = (1,2,3,3,3,3)  ntuple.count(3):4
                    2：返回元素第一次出现时的索引：ntuple.index(obj)    
                        #如：ntuple = (1,2,3,3)  ntuple.index(3):2
                    3：返回元祖中的最大值：max(ntuple)    
                        #如：ntuple = (1,2,3)  max(ntuple):3
                    4：返回元祖中的最小值：min(ntuplea)    
                        #如：ntuple = (1,2,3)  min(ntuple):1
                    5：获取元祖长度：len(tuplea)    
                        #如：ntuple = (1,2,3)  len(ntuple):3
                    6：合并两个tuple：tuple1+tuple2    
                            #如：ntuple1=(1,2)  ntuple2=(3,4) ntuple1+ntuple2:(1,2,3,4)
                    7：重复tuple:tuple1*n,n是重复次数
                        #如：ntuple1 = (1,2)  ntuple1*2:(1,2,1,2)
                    8：检测元素是否在元祖中：in
                        #如：ntuple=(1,2)  1 in ntuple:True
                    9：检测元素是否不在元祖中：not in
                        #如：ntuple1=(1,2)  1 not in ntuple1:False
                    10：使用连接符连接tuple中的元素：join(tuple) ;使用join()函数连接tuple时，tuple中的元素必须都为str类型，否则将会有TypeError异常；
                        #如：ntuple = ('a','b','c')  "-".join(ntuple):"a-b-c"
                    11：元祖本身也支持切片操作：切片操作之后仍然返回一个tuple对象
                        #如：ntuple[pos]、ntuple[start:]、ntuple[start:end]、ntuple[:end]、ntuple[start:end:step]
                    12：namedtuple仍然是不可变对象，因此其不能修改、新增、删除元素，除非元素本身是可变对象；
                3：namedtuple特有的操作：

            2：具名元祖其他操作：
                1：获取所有字段名：_fields:通过_fields属性，可以获取该tuple中所有的字段名；
                    如：user._fields
                
                2：通过list创建namedtuple：_make([]):通过_make方法可以创建一个namedtuple；
                    如：User._make(['tom',27,1])
                
                3：由于namedtuple本质上仍是元祖，因此不允许直接修改namedtuple中的元素，如需修改，需要使用_replace()方法进行；
                    如：user_tom._replace(age=23)
                
                4：如果需要将namedtuple以更友好的方式打印，可以使用_asdict()；
                    如：user_tom._asdict()

    2：双端队列：deque：双端队列：本质上是一个双向循环列表，可以高效的在左右两端增删数据；
        1：deque的特征：
            1：deque仍然是一个线性表，但是和list底层实现不同，list是一个单向线性表；而deque是一个双向循环列表，支持高效的从头部和尾部增删数据；
            2：因为deque本质仍是一个线性表，因此其他特征和list相同：
                1：deque中的数据有序，从左向右，序号从0开始；从右向左，序号从-1开始；
                2：deque支持任意增加、修改、删除数据；是一个可变对象；
                3：deque没有数据类型要求，可以存储任意数据类型的数据，只能存储值本身，不能存储k-v键值对信息；

    
        2：deque创建：
            1：导入deque：
                from collections import deque
            
            2：创建deque实例对象：
                deque([iterable[, maxlen]])
                功能：创建一个deque;
                参数：iterable：一个可迭代对象，如list,tuple,str等；可迭代对象的元素即为deque的元素；
                    maxlen：该deque最多能够容纳的元素个数，如果超出该值将会截取元素至该值设定的长度，截取方向是从左至右截取，保留尾部；
                示例：
                    #创建一个空deque: dlist = deque()    

                    #创建一个非空deque：dlist = deque([1,2])   

                    #创建一个设定元素个数的deque：dlist = deque([1,2,3,4],2)    # [3,4]
 
        3：deque操作元素：和list对元素的操作方式完全相同；如：
            1：获取元素值：list_name[idnex]    
                #如：list_name = deque([1,2,3,4])  list_name[0]:1

            2：设置元素值：list_name[index]    
                #如：list_name = deque([1,2,3,4])  list_name[0]=4:[4,2,3,4]

            3：插入元素值：list_name.insert(index,obj)    
                #如：list_name = deque([1,2,3,4])  list_name.insert(0,5):[5,1,2,3,4]

            4：追加元素值：list_name.append(obj)    
                #如：list_name = deque([1,2,3,4])  list_name.append(5):[1,2,3,4,5]

            5：移除最后一个元素值：list_name.pop()    #注意和list不同，该方法不能设置位置参数，deque默认删除并返回最后一个元素；    
                #如：list_name = deque([1,2,3,4])  list_name.pop():[1,2,3]

            6：移除第一个匹配到的元素：list_name.remove(obj)   
                #如：list_name = deque([1,2,3,4,3])  list_name.remove(3):[1,2,4,3]

            7：统计列表中元素的出现的个数：list_name.count(obj)    
                #如：list_name = deque([1,2,3,3,3,3])  list_name.count(3):4

            8：返回元素第一次出现时的索引：list_name.index(obj)    
                #如：list_name = deque([1,2,3,3])  list_name.index(3):2

            9：返回列表中的最大值：max(list_name)    
                #如：list_name = deque([1,2,3])   max(list_name):3
            10：返回列表中的最小值：min(list_name)    
                #如：list_name = deque([1,2,3])  min(list_name):1

            11：获取列表长度：len(list_name)    
                #如：list_name = deque([1,2,3])  len(list_name):3

            12：反向列表中的元素：list_name.reverse()  
                #如：list_name = deque([1,2,3])  list_name.reverse(list_name):[3,2,1]

            13：合并两个list：list1+list2(避免使用list1+=list2)
                #如：list1=deque([1,2])  list2=[3,4] list1+list2:[1,2,3,4]

            14：重复list:list1*n,n是重复次数
                #如：list1 = deque([1,2])  list1*2:[1,2,1,2]

            15：检测元素是否在列表中：in
                #如：list1=deque([1,2])  1 in list1:True

            16：检测元素是否不在列表中：not in
                #如：list1=deque([1,2])  1 not in list1:False

            17：使用连接符连接list中的元素：join(list_name) ;使用join()函数连接list时，list中的元素必须都为str类型，否则将会有TypeError异常；
                #如：list_name = deque(['a','b','c'])  "-".join(list_name):"a-b-c"

            18：元祖本身也支持切片操作：切片操作之后仍然返回一个tuple对象
                #如：list_name[pos]、list_name[start:]、list_name[start:end]、list_name[:end]、list_name[start:end:step]

        4：deque和list的选择：
            1：如果对list有大量的pop(0)或者insert(0,obj)操作，推荐使用deque；
            2：deque对于列表头部的增删时间复杂度是O(1)；list对于头部元素的增删时间复杂度是O(n)

    3：计数器：Counter:计数器；用来统计可迭代对象(如：str,list,tuple,dict)中元素出现的次数；继承自dict，是字典的子类；
        1：Counter的特征：
            1：Counter用来统计可迭代对象中元素的出现次数，元素作为key,次数作为值；Counter继承自dict,因此其实例仍然是一个dict；
    
        2：Counter的使用：
            1：导入Counter类：
                from collections import Counter

            2：创建Counter实例对象：
                1：创建一个空的Counter：counter = Counter()
                2：从一组键值对创建Counter：counter = Counter(a=3,b=3)
                3：从一个iterable对象创建Counter：counter = Counter(list/str/dict/tuple)
        
        3：Counter操作：
            1：获取元素的个数：
                counter = Counter(['a','a','s'])
                counter['a']：2
                特别注意：如果Counter中没有对应的键名，则返回0；而非KeyError异常；

            2：更新Counter实例(向Counter中追加待统计内容)：
                counter = Counter("aaass")
                counter.update("as")
                counter['a']：4
            
            3：键的删除：不能直接为键赋值为0，需要使用del来删除键：
                counter = Counter("aaasss")
                counter['a'] = 0 :['a':0,'s':3]
                del counter['a'] :['s':3]
            
            4：相关转换：
                dict(counter)   ：将counter转换为dict字典：键名为元素，键值为该元素出现的次数
                list(counter)   ：将counter转换为list列表：键名为列表的元素
                set(counter)    ：将counter转换为set集合：键名为集合的元素
                
            5：重置counter对象：该操作仅重置counter对象，并不会删除该counter
                counter.clear()
            
            6：返回topN列表：most_common([n])，即取出计数排名前N个元素，如果没有参数N，则返回全部元素
                counter = Counter("aaaadddwwe")
                counter.most_common(2) :[('a',4),('d',3)]

    4：有序字典：OrderDict：有序字典，OrderedDict会记录键值对的存储顺序，在遍历时按照存储顺序遍历；
        1：OrderedDict特征：
            1：OrderedDict特征和dict完全相同，都是字典，仅仅是增加了维护键值对的存储顺序；
            
        2：OrderedDict的使用：
            1：导入OrderDict：
                from collections import OrderedDict

            2：创建OrderedDict对象：
                1：创建空的OrderedDict：OrderedDict()
                2：通过dict创建基于key排序的OrderedDict：OrderedDict(sorted(list_name.items(),key=lambda t:t[0]))   
                3：通过dict创建基于value排序的OrderedDict：OrderedDict(sorted(list_name.items(),key=lambda t:t[1]))
        
            3：OrderedDict操作：
                1：OrderedDict基本操作和dict的操作相同;
                2：但是对于popitem(last=True)函数：默认返回最右边的key-value,如果将last参数设置为False,则弹出最左边的key-value对；
                3：move_to_end(key,last=True)函数：默认将指定的key-value对移动到最右边，如果last=False,则移至最左边；

    5：默认字典：defaultDict：带有默认值的dict字典，其他功能和dict完全相同，提供一个字典的数据结构；

        1：defaultdict特征：
            1：基本特征和dict的特征完全相同，唯一和dict不同的是，defaultdict可以设置在键名不存在时返回何种数据；
            2：defaultdict继承自dict,是dict的子类
    
        2：defaultdict的使用：
            1：导入defaultdict：
                from collections import defaultdict
        
            2：创建defaultdict实例对象：
                1：创建一个defaultdict：defaultdict(default_factory);
                    说明：  1：其中default_factory默认是None;如果该值为None,在访问不存在的键名时将会报KeyError异常，此时和默认的dict行为一致；
                            2：如果需要在访问不存在的键名时有默认值返回，则需要设置default_factory:
                                如果设置为int：默认值为0；
                                设置为str：默认值是空字符串；
                                设置为list：默认值是空list；
                                设置为dict：默认值是空dict；
                                设置为set：默认值是空set；
                                也可以设置为任意一个对象类型，将会执行该类的构造函数，并返回一个实例对象；
            
            3：defaultdict操作：
                1：基本操作和默认的dict完全相同；
三：序列排序：
    1：sort()
    2：sorted()
