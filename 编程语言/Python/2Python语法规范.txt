一：语法风格规范：
    1：关于语句行：
        1.1：语句不需要用 ; 作为语句结束符；也不使用其他任何符号作为语句结束符；
        1.2：原则上一行就是一条语句，尽量避免换行，必须换行时可以使用 '\' 连接不同行；
        1.3：python会将(),[],{}中的行隐式的连接起来，因此tuple,list,dict中的内容以及函数/方法的参数均可通过换行来提高可读性；
        1.4：如果字符串一行放不下,可以对字符串分行之后使用 () 来包裹,如果使用()来包裹字符串解决换行问题时，不同行之间不能用','分割,否则成为tuple；

    2：关于语句块：
        2.1：代码块不使用 {} 包裹，而是通过相同的缩进来确认同一段代码块；也就是说同一个代码块中的代码缩进必须保持一致；
        2.2：缩进推荐使用四个空格(tab设置为四个空格也可以)来缩进,
        2.3：对于参数换行时，如果第一行有参数，推荐使用垂直对齐的方式对参数换行；如果第一行没有参数，也可以使用四个空格悬挂缩进的方式来对参数换行；
        2.4：示例：
            # 垂直对齐
            foo = function_name(var_one, var_two,
                                var_three, var_four)
            # 悬挂缩进
            foo = function_name(
                var_one, var_two,
                var_three, var_four)
                
    3：关于空行：
        3.1：空行不是python的语法要求，但是在代码中合理使用空行可以提高代码的阅读性；
        3.2：顶级定义(函数或者类)之间空两行，方法之间定义空一行；
        3.3：代码中按照阅读需要添加一个空行

    4：关于空格：
        4.1：括号内不要用空格，但是括号内的 , : ; 之后添加空格，比如dict、tuple、list、函数/方法的参数中；
        4.2：对于二元运算符，如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not)两侧添加空格；算数运算符是否添加空格依据实际情况而定；=用在方法或者函数的默认参数中时，不要添加空格；
        4.3：不要使用空格来实现对符号的垂直对齐；如：
            foo       = 1000  # comment
            long_name = 2     # comment
            避免上述代码的对齐方式
    
    5：关于shebang:
        5.1：根据PEP-394，程序的main文件应该以#!/usr/bin/python(#!python解释器)开头；表名该python程序需要使用哪个python解释器解释执行；以#!开头的说明代码即为shebang；；实际中，大部分py文件不必以#!作为文件的开始，
    
    6：标识符命名规则：
        6.1：由数字、字母、下划线组成;
        6.2：不能以数字开头；
        6.3：不能和关键字冲突；
        6.4：标识符严格区分大小写；
        6.5：避免以__作为前缀且以__结尾的标识符(如__init__)；
        6.6：要具备可读性；除了计数器和迭代器以外，避免使用单字符作为变量名称；
        6.7：使用_前缀的标识符表示当前模块中的变量或函数是protected,即使用from module import *时不会包含；
        6.8：使用__下划线开头的实例变量或方法表示当前类内私有属性或者私有方法，在类外部无法访问；
        6.9：对类名推荐使用首字母大写的命名方式，但是对于变量，函数，方法，模块名，包名推荐使用小写加下划线的方式；
    
    7：关于脚本内的可执行代码：
        7.1：任何一个脚本文件都应该是可导入的，即当前脚本的执行逻辑都应该放在main()函数中，并在 __name__ == '__main__'时才可以执行；否则在导入该脚本文件时也会引起脚本中代码的执行，造成意外；

    8：使用pylint来检查代码是否有错误：
        8.1：python是脚本编程语言，脚本文件即为最终的可执行文件，因此在编码阶段出现的某些错误有时候无法被发现，容易引起运行时错误，因此推荐使用pylint来检查代码；

二：注释规范：
    1：python中的注释包含两个方面：文档字符串和代码注释
        1.1：文档字符串是指：在包、模块、类、函数/方法中使用"""文档字符串"""("""包裹起来的字符串)的方式对对应内容进行介绍；
             语法："""文档字符串"""|'''文档字符串'''
        1.2：代码注释是指：对某一行代码的意义进行描述，帮助阅读代码；
             语法：# 注释内容

    2：文档字符串：
        作用：文档字符串用来对对应区域的内容解释说明的字符串
        语法：使用三个"(""")或者三个'(''')来包裹；如："""文档字符串"""或者'''文档字符串'''
        位置：在对应区域首行，缩进和对应区域内容的缩进保持一致；如：函数中的文档字符串需要保持和函数内容的缩进一致；
        具体语法：
            2.1：在类中使用文档字符串为类添加说明:
                1：文档字符串必须在类的第一行，对类进行整体描述；并且"""需要和类中代码块缩进一致，文档字符串内容紧跟"""；
                2：类文档字符串包括对类的整体描述以及类属性的说明：
                    2.1：类的整体描述应该紧跟"""",并且以 。或者 ！结尾。
                    2.2：如果类中有公共属性(静态属性/实例属性),应该使用Attributes来为公共属性添加说明，并且该部分应该和上一部分间隔一个空格，   如：
                        Attributes: #描述该类的属性
                            属性的描述应该包括：属性名称，属性说明，如果没有则可不写；
                3：示例:
                    class ExampleClass(object):
                        """该类是测试基类，用来提供基本测试方法。

                        Attributes: 
                            code: 该属性表示测试结果，1：表示测试成功，0表示测试失败
                            id: 该属性表示测试用例id,整数；
                        """
            2.2：在函数/方法中使用文档字符串：
                1：理论上每一个函数/方法都应该包含文档字符串来对函数/方法加以说明，除非该函数/方法有以下特征可以省略：
                    1：外部不可见、非常短小、逻辑简单明了
                2：文档字符串必须在函数/方法的第一行，"""的缩进和函数/方法内容的缩进保持一致；
                3：函数/方法文档字符串包括两个部分：
                    2.1：对函数/方法的整体说明：该部分内容需要紧跟"""，并且以。和！结尾；
                    2.3：描述函数的其他项目：参数，返回值，异常
                        1：每一个项目说明都要和上一个项目说明间隔一个空行，并且保持和"""的缩进一致即可；项目的内容则需要另起一行，相对于项目类型缩进四个空格；如：
                            """对该区域内容的功能描述

                            Args: #描述接收的参数
                                每一个具体参数需要另起一行添加详细说明：包括参数的名字和参数的说明；并使用:和空格添间隔参数的名称和描述，如果描述超过两行，超出的行同样需要使用缩进两个空格或者四个空格悬挂缩进；如：
                                name: 用户姓名
                                age: 用户年龄

                            Returns/Yields: #描述返回值，普通函数使用Returns，生成器使用Yields
                                每一个具体参数需要另起一行添加详细说明：包括返回值和返回值的说明；并使用:和空格添间隔返回值和描述，如果描述超过两行，超出的行同样需要使用缩进两个空格或者四个空格悬挂缩进，如果函数没有返回值，该项可以省略；

                            Raises：#描述该函数/方法有可能抛出的异常
                                异常的描述包括异常类型和发生异常时的情况；如果没有则可以不写
                            """
                        2：示例：
                            def save_user_info(name,age):
                                """该函数存储用户姓名及年龄,并返回存储结果。
                                
                                Args: 
                                    name: 用户姓名，必填参数，只能为字符串。
                                    age: 用户年龄，必填参数，只能为数字，大于0且小于150。
                                
                                Returs:
                                    1: 保存成功
                                    0: 保存失败
                                
                                Raises:
                                    IOError:数据库连接失败时将会抛出IOError异常。
                                """

    3：基本代码语句注释：
        1.1:代码的解释性注释应该使用#来注释，如果是单行即使用 # 注释内容，如果是多行注释应该在每一行使用 # 注释内容;
        1.2：对于比较复杂的代码块应该在代码块开始时使用 # 来添加注释。
            如：
                # 如果i=0那么打印i=0
                # 如果i!=0那么打印i!=0
                if i==0:
                    print 'i=0'
                else:
                    print 'i!=0'
        1.3：对于单行代码添加解释性注释，应该在代码尾部使用 # 来添加注释，并且#和代码至少间隔两个空格；
            如：
                print time.time()  # 打印当前时间戳