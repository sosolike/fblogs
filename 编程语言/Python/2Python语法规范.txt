一：语法风格规范：
    1:关于Python版本：
        python分为python2.x版本和python3.x版本，语法差异较大，且互不兼容；因此在编写代码之前需要注意以下两个事项：
            1：确定代码将在哪个版本的python环境运行；即确定使用python2.x版本还是python3.x版本的环境；
            2：确定好要使用的python环境之后，就要按照对应版本的python语法来编写代码；

    2：关于语句行：
        1.1：语句不需要用 ; 作为语句结束符；也不使用其他任何符号作为语句结束符；
        1.2：原则上一条语句占据一行，一行的字符尽量不要超过79个，尽量避免换行；
        1.3：python会将(),[],{}中的行隐式的连接起来，因此tuple,list,dict中的内容以及函数/方法的参数均可通过换行来提高可读性；
        1.4：如果一行放不下，必须换行时，可以使用 '\' 或者 () 来连接不同行，特别注意，使用()连接不同行时避免在不同行之间使用','；否则将会被认作tuple；

    3：关于语句块：
        2.1：代码块不使用 {} 包裹，而是通过相同的缩进来确认同一段代码块；也就是说同一个代码块中的代码缩进必须保持一致；
        2.2：缩进推荐使用四个空格(tab设置为四个空格也可以)来缩进,
        2.3：对于参数换行时，如果第一行有参数，推荐使用垂直对齐的方式对参数换行；如果第一行没有参数，也可以使用四个空格悬挂缩进的方式来对参数换行；
        2.4：示例：
            # 垂直对齐
            foo = function_name(var_one, var_two,
                                var_three, var_four)
            # 悬挂缩进
            foo = function_name(
                var_one, var_two,
                var_three, var_four)
                
    4：关于空行：
        3.1：空行不是python的语法要求，但是在代码中合理使用空行可以提高代码的阅读性；
        3.2：顶级定义(函数或者类)之间空两行，方法之间定义空一行；
        3.3：代码中按照阅读需要添加一个空行

    5：关于空格：
        4.1：括号内不要用空格，但是括号内的 , : ; 之后添加空格，比如dict、tuple、list、函数/方法的参数中；
        4.2：对于二元运算符，如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not)两侧添加空格；算数运算符是否添加空格依据实际情况而定；=用在方法或者函数的默认参数中时，不要添加空格；
        4.3：不要使用空格来实现对符号的垂直对齐；如：
            foo       = 1000  # comment
            long_name = 2     # comment
            避免上述代码的对齐方式
    
    6：关于shebang:
        5.1：根据PEP-394，程序的main文件应该以#!/usr/bin/python(#!python解释器)开头；表名该python程序需要使用哪个python解释器解释执行；以#!开头的说明代码即为shebang；；实际中，大部分py文件不必以#!作为文件的开始，
    
    7：标识符命名规则：
        组成字符：
        6.1：由数字、字母、下划线组成;
        注意事项：
        6.2：不能以数字开头；
        6.3：不能和关键字冲突；
        6.4：标识符严格区分大小写；
        6.5：避免以__作为前缀且以__结尾的标识符(如__init__)；
        6.6：要具备可读性；除了计数器和迭代器以外，避免使用单字符作为变量名称；
        6.7：避免使用中英混合命名；
        命名推荐：
            1：受保护的实例属性、实例方法和模块中受保护的变量/函数/类应当使用_作为标识符的前缀；
            2：私有状态的实例属性、实例方法和模块中的私有变量/函数/类应当使用__作为标识符的前缀；
            3：变量、函数、属性、方法应当使用全小写的方式命名；
            4：类名、异常名称应当使用每个单词首字母大写的方式命名；
            5：模块中的常量应当使用大写和_分割的方式命名；

    8：关于脚本内的可执行代码：
        7.1：任何一个脚本文件都应该是可导入的，即当前脚本的执行逻辑都应该放在main()函数中，并在 __name__ == '__main__'时才可以执行；否则在导入该脚本文件时也会引起脚本中代码的执行，造成意外；
    
    9：使用pylint来检查代码是否有错误：
        8.1：python是脚本编程语言，脚本文件即为最终的可执行文件，因此在编码阶段出现的某些错误有时候无法被发现，容易引起运行时错误，因此推荐使用pylint来检查代码；

二：注释规范：
    1：python中的注释包含两个方面：文档字符串和代码注释
        1.1：文档字符串是指：在包、模块、类、函数/方法中使用"""文档字符串"""("""包裹起来的字符串)的方式对对应内容进行介绍；
             语法："""文档字符串"""|'''文档字符串'''
        1.2：代码注释是指：对某一行代码的意义进行描述，帮助阅读代码；
             语法：# 注释内容

    2：文档字符串：
        作用：文档字符串用来对对应区域的内容解释说明的字符串
        语法：使用三个"(""")或者三个'(''')来包裹；如："""文档字符串"""或者'''文档字符串'''
        位置：在对应区域首行，缩进和对应区域内容的缩进保持一致；如：函数中的文档字符串需要保持和函数内容的缩进一致；
        具体语法：
            2.1：在类中使用文档字符串为类添加说明:
                1：文档字符串必须在类的第一行，对类进行整体描述；并且"""需要和类中代码块缩进一致，文档字符串内容紧跟"""；
                2：类文档字符串包括对类的整体描述以及类属性的说明：
                    2.1：类的整体描述应该紧跟"""",并且以 。或者 ！结尾。
                    2.2：如果类中有公共属性(静态属性/实例属性),应该使用Attributes来为公共属性添加说明，并且该部分应该和上一部分间隔一个空格，   如：
                        Attributes: #描述该类的属性
                            属性的描述应该包括：属性名称，属性说明，如果没有则可不写；
                3：示例:
                    class ExampleClass(object):
                        """该类是测试基类，用来提供基本测试方法。

                        Attributes: 
                            code: 该属性表示测试结果，1：表示测试成功，0表示测试失败
                            id: 该属性表示测试用例id,整数；
                        """
            2.2：在函数/方法中使用文档字符串：
                1：理论上每一个函数/方法都应该包含文档字符串来对函数/方法加以说明，除非该函数/方法有以下特征可以省略：
                    1：外部不可见、非常短小、逻辑简单明了
                2：文档字符串必须在函数/方法的第一行，"""的缩进和函数/方法内容的缩进保持一致；
                3：函数/方法文档字符串包括两个部分：
                    2.1：对函数/方法的整体说明：该部分内容需要紧跟"""，并且以。和！结尾；
                    2.3：描述函数的其他项目：参数，返回值，异常
                        1：每一个项目说明都要和上一个项目说明间隔一个空行，并且保持和"""的缩进一致即可；项目的内容则需要另起一行，相对于项目类型缩进四个空格；如：
                            """对该区域内容的功能描述

                            Args: #描述接收的参数
                                每一个具体参数需要另起一行添加详细说明：包括参数的名字和参数的说明；并使用:和空格添间隔参数的名称和描述，如果描述超过两行，超出的行同样需要使用缩进两个空格或者四个空格悬挂缩进；如：
                                name: 用户姓名
                                age: 用户年龄

                            Returns/Yields: #描述返回值，普通函数使用Returns，生成器使用Yields
                                每一个具体参数需要另起一行添加详细说明：包括返回值和返回值的说明；并使用:和空格添间隔返回值和描述，如果描述超过两行，超出的行同样需要使用缩进两个空格或者四个空格悬挂缩进，如果函数没有返回值，该项可以省略；

                            Raises：#描述该函数/方法有可能抛出的异常
                                异常的描述包括异常类型和发生异常时的情况；如果没有则可以不写
                            """
                        2：示例：
                            def save_user_info(name,age):
                                """该函数存储用户姓名及年龄,并返回存储结果。
                                
                                Args: 
                                    name: 用户姓名，必填参数，只能为字符串。
                                    age: 用户年龄，必填参数，只能为数字，大于0且小于150。
                                
                                Returs:
                                    1: 保存成功
                                    0: 保存失败
                                
                                Raises:
                                    IOError:数据库连接失败时将会抛出IOError异常。
                                """

    3：基本代码语句注释：
        1.1:代码的解释性注释应该使用#来注释，如果是单行即使用 # 注释内容，如果是多行注释应该在每一行使用 # 注释内容;
        1.2：对于比较复杂的代码块应该在代码块开始时使用 # 来添加注释。
            如：
                # 如果i=0那么打印i=0
                # 如果i!=0那么打印i!=0
                if i==0:
                    print 'i=0'
                else:
                    print 'i!=0'
        1.3：对于单行代码添加解释性注释，应该在代码尾部使用 # 来添加注释，并且#和代码至少间隔两个空格；
            如：
                print time.time()  # 打印当前时间戳
三：Python字符编码：
    python分为2.x版本和3.x版本；其中2.x版本默认使用的是ASCII编码，python3.x版本默认使用的是unicode编码；
    1：关于字符编码：
        字符集和编码：
            1：字符编码分为：字符和编码；
                字符：
                    字符指字符集，即图形化的字符集合，是字符和对应数字编号的映射；不同的字符集中同一个数字标号可能对应着不同的字符，比如数字标号为53947，在gbk字符集中对应的是中文‘一’，而在unicode字符集中53947对应的是韩文‘튻’；
                编码：
                    编码指编码规则，即用来将图形化的字符集中某个字符对应的数字编号转为二进制串的规则；本质上是用来将数字转为二进制串的规则，和字符集本身无关，比如对于unicode字符集中的某个字符，可以按照GBK编码柜子编码也可以按照utf-8编码规则编码；

                大多数情况下，字符集和编码规则同时产生发布，比如ASCII或者GBK，即规定了一套字符集，也同时规定了编码规则；但是unicode例外，unicode仅仅只是一套字符集，并非编码规则；

            2：字符编码存储与显示方式：
                存储时：字符在存储时会按照指定的字符集获取该字符在字符集中对应的数字编号，然后按照编码规则将数字编号转为二进制串存储或者传输；
                读取时：将表示字符的二进制串按照编码规则解码为数字编号，然后按照字符集将数字编号对应的字符进行显示；

        ASCII字符编码：
            1：字符集：ASCII字符集中只包括了英文字母(大小写)，数字，运算/标点符号以及一些非打印字符，一共128个；其中96个打印字符(字母，数字，符号)和32个非打印字符(控制字符，比如退格，换行，响铃等)；每一个字符对应0～128之间一个数字，这个数字称之为字符编号，这128个字符和其对应的字符编号就组成了一套字符集；
            2：编码：ASCII规定在计算机中使用1个字节来存储一个字符，最高位置0，剩余7位来表示字符；这就是ASCII的编码规则；
            3：ASCII字符编码中既规定了所包含的字符类型，又规定了字符应该如何转换为字节串，因此ASCII字符编码既是一套字符集，同时又是一套编码规则；
            4：ASCII编码表示的字符类型有限，对于其他字符类型无法表示(比如中文，日文，韩文等)，因此ISO提出了unicode字符集；
        unicode字符集：
            1：unicode字符集是ISO提出的一套字符集，可以包含上百万个字符；每一个字符都有一个唯一的unicode编号，以16进制表示，并在前面加上U，记做U+XXXX；
            2：unicode虽然产生了一个字符集，根据unicode编号即可唯一确定一个字符，但是并未规定字符的编号应该如何存储；比如一个字符的编号为44，那么一个字节即可存储，如果编号为44444，那么需要两个字节才能存储，但是unicode并未明确规定如何存储：即如何对字符的unicode编号进行编码得到二进制串进行存储；因此根据对unicode不同的实现规则又产生了UTF-32、UTF-16、UTF-8等编码；
            3：UTF-8编码规则：
                1：UTF-8是指使用8个二进制位(1个字节)作为一个编码单位，根据字符的不同，使用1~4个字节来存储；是可变长编码，完全兼容ASCII;
                2：如果使用UTF-8编码，则代表使用UTF-8的规则将unicode字符编号映射为字节序列，或者将字节序列映射为unicode字符编号，并使用unicode字符集解释字符编号；

    2：对于不同python版本的字符编码说明：
        对于python2.x版本：
            1.1：如果使用python2.x版本：由于其默认使用ASCII字符集合ASCII字符编码规则，因此python脚本文件中不能使用任何非ASCII字符集字符(包括注释中也不能使用)；python程序本身也不能读取和处理非ASCII字符集的字符；

            1.2：如果当前脚本文件内容中需要使用非ASCII字符集的字符，则需要设置当前文件的字符编码，设置方式为：
                在脚本文件第一行(如果带了shebang，则加在第二行)加上一下代码：
                    # -*- coding: UTF-8 -*-
                    或者
                    # coding:utf-8,
                即可表明该脚本文件使用unicode字符集，并且编码为UTF-8编码;

            1.3：在文件开头添加上# coding:utf-8或者# -*- coding: UTF-8 -*-的方式，仅表明当前文件本身的编码使用unicode字符集，并使用utf-8作为编码规则，但是程序本身不能仍然处理非ASCII字符集字符，如果Python程序本身需要处理费ASCII字符集字符，则需要设置Python解释器字符编码，设置方式如下：
                import sys
                reload(sys)
                sys.setdefaultencoding('utf-8')
            注意：
                1：上述设置是设置python解释器内部的字符编码，设置完成后程序才可以读取和处理非ASCII字符集字符；
                2：字符编码可以设置为UTF-8或者UTF-16或者UTF-32等，一般设置为UTF-8，表明Python解释器使用unicode字符集，使用UTF-8编码规则；
                3：上述设置完成后，在进行字符编码转换时需要以unicode字符作为中间字符；然后使用其他的编码规则进行编码和解码；
            
            1.4：对于Python2.x版本使用字符串的建议：
                1：Python2.x版本中str表示的是字节串，unicode表示的是字符串，两者不同；
                2：Python2.x版本中在使用非ascii字符集字符串时，推荐在字符串之前使用u表示该字符串是unicode字符串，而非字节串；如:u'字符串'；
                3：Python2.x版本中进行字符串比对时，建议使用unicode字符串进行比对，而非使用str字节串进行比对；
                4：Python2.x版本中字符串和字节串之间转换路线：str--解码-->unicode--编码-->str；

        对于python3.x版本：
            1.1：python3.x版本以后的版本默认使用unicode字符集，无需再像python2.x一样修改python文件以及python解释器的字符编码配置；
            1.2：python3.x版本以后：
                1：使用bytes类型表示字节串，即:b'\xe5\x8e\x9f\xe5',表示的是二进制字节串；
                2：而str则直接表示unicode类型，即：'字符串',表示的就是unicode字符串；
            1.3：python3.x版本中字符串和字节串之间转换路线：bytes--解码-->unicode--编码-->bytes

    3：python中进行编码转换
        1：编码使用encode()函数；原型：encode(encoding='UTF-8',errors='strict')
            1.1：功能：按照指定的编码规则将字符(字符串)进行编码，在python中，就是将unicode字符集中字符对应的字符编号转换为二进制串的过程；
            1.2：encoding:指定编码规则，默认使用UTF-8编码；
            1.3：errors:设置编码过程中不同的错误处理方案，默认为strict,意为严格模式，编码错误将引起UnicodeError,其他可能的值有ignore、replace等；

        2：解码使用decode()函数；原型：decode(encoding='UTF-8',errors='strict)
            2.1：功能：按照encoding指定的编码规则解码字符串，就是将二进制串按照指定编码规则转换为unicode字符编号；
            2.2：encoding：指定需要解码的解码规则，默认是UTF-8；
            2.3：errors：设置解码过程中不同的错误处理方案，默认为strict,意为严格模式，解码错误将引起的UnicodeError,其他可能的值有ignore、replace等；