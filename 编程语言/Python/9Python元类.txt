1：创建类实例的过程：__new__ -> __init__
2：python中的继承链
3：元类
4：关于一切皆是对象：变量、函数、类均是对象，关于type()
一：关于新式类和旧式类：
    1：python2.x版本中，如果在声明class时直接或者间接继承了object类，那么该类称之为新式类；如果在声明class时没有继承object类，那么该类称之为旧式类；如：
        # 旧式类
        class A21:
            pass
        
        # 新式类
        class A22(object):
            pass

    2：python3.x版本中，没有新式类和旧式类的区分，所有类都显式或者隐式的继承自object类；如：
        class A31():
            pass
        
        class A32(A31):
            pass

    3：关于类的直接父类可以通过类的__bases__属性来查看；如：
        print A21.__bases__    # ()，由于未显式的描述A21类继承的父类，因此该属性返回空的tuple；
        print A22.__bases__    # (<class 'object'>,)，即，该类直接继承的父类为：object；
        print(A31.__bases__)    # (<class 'object'>,)，即，该类直接继承的父类为：object；
        print(A32.__bases__)    # (<class '__main__.A31'>,)，即，该类直接继承的父类为：A31类；

    4：关于类的继承链可以通过类的__mro__属性来查看；（__mro__属性本来是用作查看类实例方法的解析顺序，也可以通过该属性来查看类的继承链；只能在python3中使用）
        print(A31.__bases__)    # (<class '__main__.A31'>, <class 'object'>);
        print(A32.__bases__)    # (<class '__main__.A32'>, <class '__main__.A31'>, <class 'object'>);

二：关于类的__new__方法和__init__方法：

三：关于元类：

四：关于类实例对象的创建：
    1：基本流程：
        1：查找该类的元类，即检查该类的__metaclass__属性设置的值，该值可以是一个类或者一个函数；并执行__metaclass__属性设置的类的__new__方法或者__metaclass__属性设置的函数，创建元类(metaclass)的实例对象，即要实例化的类；
        2：接着执行需要被实例化的类的__new__方法，创建出一个类(class)的实例对象，即最终的实例对象；
        3：接着执行该类的__init__方法，对实例对象进行初始化；
    2：验证实例：
        class A():

