一：整数类型：
    1：python中整数类型特征：
        1：Python中的整数包括正整数、0、负整数；
        2：Python中的整数没有最大值和最小值限制，理论上可以取到正无穷和负无穷；
        3：Python中整数允许以二进制、八进制、十进制、十六进制表示：
            以二进制表示整数时，需要以 0b 或者 0B 作为前缀；
            以八进制表示整数时，需要以 0o 或者 0O 作为前缀；
            以十进制表示整数时，则无需任何前缀；
            以十六进制表示整数时，需要以 0x 或者 0X 作为前缀；
    2：整数间进制转换：
        转换至二进制：
            # number 必须是其他进制的整数
            bin(int number)    
        转换至八进制：
            # number 必须是其他进制的整数
            oct(int number)    
        转换至十六进制：
            # number 必须是其他进制的整数
            hex(int number)    
        转换至十进制：
            # number必须是其他进制的整数字符串,需要使用str(其他进制数字)进行类型转换，如str(0Xc)，不可直接使用0Xc、'0Xc'、"0Xc"
            # base参数则为当前数字的进制，默认是10进制；
            int(str number,base=10)    
    3：数据类型转换：(将其他类型数据转换为十进制整数)
        转换方式：int(str number,base=10)
        功能描述：
            1：该函数可以将str类型的其他进制数字转换为十进制的整数；
            2：该函数也可将其他数据类型的数据转换为十进制的整数；
        参数要求：
            1：在实现进制之间转换时:
                1：number参数必须是str类型的其他进制整数，如：str(0Xc)、0Xc、'0Xc'、"0Xc"等，不可直接使用0xc；
                2：必须使用base参数指定源数字的进制；不指定时默认为10进制；

            2：在将其他数据类型转换为十进制整数时:
                1：number只能是仅带有'+' 和 '-'前缀的数字字符串、浮点数、布尔值；如：
                    当number是字符串时，只能是'1','-12'等整数字符串，不能是'+1a'、'-a1'、'a1a'等，否则将会抛出ValueError异常；
                    当number是浮点数时，只能是1.23,-1.23等浮点数，不能是'1.23'，否则将抛出ValueError异常；
                    当number是布尔值时，只能是False或者True，不能是布尔值构成的字符串：'True'或者'False'，否则将抛出ValueError异常；
                    当number为空时，将返回0；
                2：数据类型转换时不能再指定base参数，否则将报出TypeError异常；

        错误异常：
            1：在使用int函数进行进制转换或者类型转换时，必须保证number是可转化的，否则将会抛出ValueError异常；如果对于number的值是未知状态，则在使用int函数时必须进行异常处理；
            2：进行类型转换时，如果携带有base参数，将会报TypeError异常；
    
    4：整数类型检测：
        1：检测变量本身是否是int类型：
            使用isinstance()检测：
                检测原理：
                    由于Python中一切皆是对象，包括变量本身也是对象，而数据类型int则是class(通过type(int)即可查看),因此可以通过检测变量是否是int类的实例对象来检测一个变量是否是int类型；
                检测方式：
                    isinstance(var_name,int)    # 如果是int类型，则返回True,否则返回False；
            使用type()函数检测：
                检测原理：
                    type()函数会返回一个变量的类型，因此可以通过type()函数的返回值是否是int来检测变量是否是int类型；
                检测方式:
                    type(var_name)    # 如果返回int则是int类型，否则不是int类型；

        2：检测变量值是否是整数字符串：
            1：使用isdigit()来检测：
                检测原理：如isdigit()函数返回True，则是纯数字字符串，否则不是；
                使用方式：var_name.isdigit()
                备注：要求var_name不能含有任何非数字字符，比如正负号('+'、'-')，或者小数点('.')均不可以；

            2：可以使用正则表达式来检测，使用正则表达式需要先导入 re 模块：
                检测原理：检测变量值是否符合正则表达式规则
                检测方式：re.match(r'[+-]?\d+$',var)  #如果返回None则表示未匹配到整数字符串；反之则是；
            
            3：可以通过 int() 函数在进行类型转换是是否抛出 ValueError 异常类判断是否是整数字符串：
                if(var_name != str(True) and var_name != str(False)):
                    try:
                        int(var)
                    except ValueError as e:
                        return False
                    else:
                        return True
二：浮点数：
    1：python中浮点数类型特征：
        1：python中浮点数即小数；
        2：python中浮点数的表示形式：
            可以使用小数的形式表示：1.23；
            也可以使用指数形式表示：123E-2/123e-2
    2：Python中浮点数的精度：
        1：python中浮点数默认是双精度，即使用8个字节(64位)来存储一个浮点数；其中11位用来存储浮点数整数部分，52位用来存储浮点数小数部分，1位用来存储正负号；
        2：python中的浮点数在存储时将会转换成二进制的方式存储；由于在转换成二进制时采用的是除2取余逆序排列法，在某些情况下，一个浮点数有可能会无法被2整除，造成无限小数的情况，那么在有效数字的第53位将会按照0舍1进的方式处理至52位；最终造成实际存储的小数比实际小数或大或小；
        3：python中对于浮点数的精度不准问题会造成以下影响：
            1：精度不准在运算中得不到符合逻辑的结果：
                    比如 if 0.1+0.2 == 0.3: 结果将会返回False
            2：精度不准在金融和科技等对数字精度要求较高的行业会无法满足需求；导致无法直接使用浮点数；
    3：浮点数相关处理：
        1：使用 round(x [,n]) 函数获取指定有效位数的浮点数：
            功能：函数会按照n指定的有效位数返回x的四舍五入值；
            参数：x：需要进行四舍五入的浮点数；
                 n：需要保留的小数位数；
            示例：
                round(1.236,1)    #1.2
                round(1.236,2)    #1.24
            备注：round()函数的行为并非完全严格按照四舍五入进行，如：
                round(1.55,1)    # 1.6
                round(2.55,1)    # 2.5
                原因：
                    1：在浮点数不能够完全精确存储时，指定round函数的有效位数，将会对所指定有效位数的后一位进行四舍五入操作；因此有可能得到上述结果；
                    2：如果浮点数能够完全精确存储时，该函数的行为要区分python版本，在Python2.x版本下，执行简单的四舍五入操作；在python3.x版本下，指定有效位为奇数，则进位，前一位为偶数，则舍去；
        2：使用decimal模块进行浮点数运算：
            decimal模块提供了对浮点数运算的函数，可以实现浮点数的精确运算；
            使用方式：
                1：先导入decimal模块的Decimal类：from decimal import Decimal
                2：通过创建Decimal实例对象来实现浮点数精确运算；如：
                    d1 = Decimal('0.1')
                    d2 = Decimal('0.2')
                    d3 = d1+d2    # 0.3
                    使用要求：
                        1：在创建Decimal实例对象时，要求浮点数必须以字符串的类型传递至Decimal构造函数，如果直接传入浮点数本身，那么在创建Decimal实例对象本身时就有可能已经出现精度不准；
                        2：Decimal实例本身可以和Decimal实例或者数值直接进行运算，但是如果计算双方是浮点数，为了避免得到一个不准确的计算结果，尽量使用Decimal实例和Decimal实例进行运算；
                        3：Decimal实例运算的结果仍然是一个Decimal实例；
                3：通过Decimal实例对象对浮点数进行四舍五入：
                    Decimal('1.2363').quantize(Decimal('0.00'))    # 1.24
                4：通过Decimal获取指定位数的浮点数运算结果：
                    getcontext().prec = 3    # 设置运算结果有效位数
                    Decimal(1)/Decimal(7)    # 计算获得浮点数运算结果
                    结果是0.143,相比float(1)/float(7)，得到的结果有效位数可以控制。
                5：通过Deciaml查看浮点数实际存储时的所有有效位数：
                    Decimal.from_float(1.233)
                    结果是：
                    1.233000000000000095923269327613525092601776123046875       
    4：浮点数类型转换：
        1：使用 float() 函数进行类型转换：
            float()函数可以将整数、浮点数字符串、布尔值转换为浮点数;
            注意：
                1：在转换浮点数字符串时，字符串只能是正/负整数字符串或者正/负浮点数字符串，不允许包含任何其他非数字字符；
                2：如果字符串中含有其他字符，或者无法转换为浮点数将会抛出 ValueError 异常；
                3：如果待转换变量值无法明确，那么在转换时务必处理该异常；
                
    5：关于浮点数的检测：
        1：浮点数类型检测
            1：可以使用 isinstance() 函数检测变量值是否是float类型：
                isinstance(var,float)  # 如果是浮点数类型将会返回True，如果不是浮点数类型将会返回False
                    
            2：可以使用 type() 函数检测变量值是否是float类型：
                type(var)  # 如果返回float，则为float类型，返回其他值则不是float类型；
                
        2：检测浮点数字符串：
            1：可以利用float失败时抛出ValueError来检测是否是float字符串：
                try:
                    float(var)
                except ValueError as e:
                    return False
                else:
                    return True
                            
            2：使用正则表达式：
                re.match(r'[+-]?\d+[.]?\d+$')  # 如果返回None则表示未匹配到浮点数字符串，否则匹配到；       
                 
    3：布尔值：
        1：python中的布尔值分别为True和False;Python中的布尔值只能是True和False，除此之外的写法均是非法字符；
        2：python语言中，''、""、空列表[]、空字典{}、空tuple(,)、空set、None、0等在条件运算中会被自动转换为布尔值；
        3：布尔值也可以直接转换为整数和浮点数；
            True：转换为整数:1；转换为浮点数:1.0;
            False：转换为整数：0；转换为浮点数：0.0
    
    4：空值：None：
        1：None表示空的概念，什么也没有，和值为空的某个具体数据类型，如：""、[]、{}等不同；在条件运算中，None会被自动转换为布尔值False；
        2：python中空记做None;只能是None，除此之外的任何其他形式都是非法字符；
        3：None是全局唯一的，即在Python解释器中只有一个None；如果有多个变量为None，那么这些变量的id值是相同的；
