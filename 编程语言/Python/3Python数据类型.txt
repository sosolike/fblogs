一：整数类型：
    1：python中整数类型特征：
        1：Python中的整数包括正整数、0、负整数；
        2：Python中的整数没有最大值和最小值限制，理论上可以取到正无穷和负无穷；
        3：Python中整数允许以二进制、八进制、十进制、十六进制表示：
            以二进制表示整数时，需要以 0b 或者 0B 作为前缀；
            以八进制表示整数时，需要以 0o 或者 0O 作为前缀；
            以十进制表示整数时，则无需任何前缀；
            以十六进制表示整数时，需要以 0x 或者 0X 作为前缀；
    2：整数间进制转换：
        转换至二进制：使用bin()内置函数
            # number 必须是其他进制的整数
            bin(int number)    
        转换至八进制：使用oct()内置函数
            # number 必须是其他进制的整数
            oct(int number)    
        转换至十六进制：使用hex()内置函数
            # number 必须是其他进制的整数
            hex(int number)    
        转换至十进制：使用int()内置函数
            # number必须是其他进制的整数字符串,需要使用str(其他进制数字)内置函数先转换至字符串类型，如str(0Xc)，不可直接使用0Xc、'0Xc'、"0Xc"
            # base参数则为当前数字的进制，默认是10进制；
            int(str number,base=10)    
    3：数据类型转换：(将其他类型数据转换为十进制整数)
        转换方式：int(str number,base=10)
        功能描述：
            1：该函数可以将str类型的其他进制数字转换为十进制的整数；
            2：该函数也可将其他数据类型的数据转换为十进制的整数；
        参数要求：
            1：在实现进制之间转换时:
                1：number参数必须是str类型的其他进制整数，如：str(0Xc)、0Xc、'0Xc'、"0Xc"等，不可直接使用0xc；
                2：必须使用base参数指定源数字的进制；不指定时默认为10进制；

            2：在将其他数据类型转换为十进制整数时:
                1：number只能是仅带有'+' 和 '-'前缀的数字字符串、浮点数、布尔值；如：
                    当number是字符串时，只能是'1','-12'等整数字符串，不能是'+1a'、'-a1'、'a1a'等，否则将会抛出ValueError异常；
                    当number是浮点数时，只能是1.23,-1.23等浮点数，不能是'1.23'，否则将抛出ValueError异常；
                    当number是布尔值时，只能是False或者True，不能是布尔值构成的字符串：'True'或者'False'，否则将抛出ValueError异常；
                    当number为空时，将返回0；
                2：数据类型转换时不能再指定base参数，否则将报出TypeError异常；

        错误异常：
            1：在使用int函数进行进制转换或者类型转换时，必须保证number是可转化的，否则将会抛出ValueError异常；如果对于number的值是未知状态，则在使用int函数时必须进行异常处理；
            2：进行类型转换时，如果携带有base参数，将会报TypeError异常；
            3：在进行进制转换时，如果源数据本身进制和base参数设置的进制不同时，同样会有TypeError异常需要处理；
    
    4：整数类型检测：
        1：检测变量本身是否是int类型：
            使用isinstance()内置函数检测：
                检测原理：
                    由于Python中一切皆是对象，数据类型是class类型的(通过type(int)即可查看)，而某种数据类型的变量则是该类型的实例对象；因此可以通过检测变量是否是int类的实例对象来检测一个变量是否是int类型；
                检测方式：
                    isinstance(var_name,int)    # 如果是int类型，则返回True,否则返回False；
            使用type()内置函数检测：
                检测原理：
                    type()函数会返回一个变量的类型，因此可以通过type()函数的返回值是否是int来检测变量是否是int类型；
                检测方式:
                    type(var_name)    # 如果返回int则是int类型，否则不是int类型；

        2：检测变量值是否是整数字符串：
            1：使用isdigit()来检测：
                检测原理：如isdigit()函数返回True，则是纯数字字符串，否则不是；
                使用方式：var_name.isdigit()
                备注：要求var_name不能含有任何非数字字符，比如正负号('+'、'-')均不可以；

            2：可以使用正则表达式来检测，使用正则表达式需要先导入 re 模块：
                检测原理：检测变量值是否符合正则表达式规则
                检测方式：re.match(r'[+-]?\d+$',var)  #如果返回None则表示未匹配到整数字符串；反之则是；
            
            3：可以通过 int() 函数在进行类型转换是是否抛出 ValueError 异常类判断是否是数字符串：
                if(var_name != str(True) and var_name != str(False) and !isinstance(var_name,float)):
                    try:
                        int(var)
                    except ValueError as e:
                        return False
                    else:
                        return True
二：浮点数：
    1：python中浮点数类型特征：
        1：python中浮点数即小数；
        2：python中浮点数的表示形式：
            可以使用小数的形式表示：1.23；
            也可以使用指数形式表示：123E-2/123e-2
    2：Python中浮点数的精度：
        1：python中浮点数默认是双精度，即使用8个字节(64位)来存储一个浮点数；其中11位用来存储浮点数整数部分，52位用来存储浮点数小数部分，1位用来存储正负号；
        2：python中的浮点数在存储时将会转换成二进制的方式存储；由于在转换成二进制时采用的是除2取余逆序排列法，在某些情况下，一个浮点数有可能会无法被2整除，造成无限小数的情况，那么在有效数字的第53位将会按照0舍1进的方式处理至52位；最终造成实际存储的小数比实际小数或大或小；
        3：python中对于浮点数的精度不准问题会造成以下影响：
            1：精度不准在运算中得不到符合逻辑的结果：
                    比如 if 0.1+0.2 == 0.3: 结果将会返回False
            2：精度不准在金融和科技等对数字精度要求较高的行业会无法满足需求；导致无法直接使用浮点数；
    3：浮点数相关处理：
        1：使用 round(x [,n]) 内置函数获取指定有效位数的浮点数：
            功能：函数会按照n指定的有效位数返回x的四舍五入值；
            参数：x：需要进行四舍五入的浮点数；
                 n：需要保留的小数位数；
            示例：
                round(1.236,1)    #1.2
                round(1.236,2)    #1.24
            备注：round()函数的行为并非完全严格按照四舍五入进行，如：
                round(1.55,1)    # 1.6
                round(2.55,1)    # 2.5
                原因：
                    1：在浮点数不能够完全精确存储时，指定round函数的有效位数，将会对所指定有效位数的后一位进行四舍五入操作；因此有可能得到上述结果；
                    2：如果浮点数能够完全精确存储时，该函数的行为要区分python版本，在Python2.x版本下，执行简单的四舍五入操作；在python3.x版本下，指定有效位后一位为奇数，则进位，有效为后一位为偶数，则舍去；
        2：使用decimal模块进行浮点数运算：
            decimal模块提供了对浮点数运算的函数，可以实现浮点数的精确运算；
            使用方式：
                1：先导入decimal模块的Decimal类：from decimal import Decimal
                2：通过创建Decimal实例对象来实现浮点数精确运算；如：
                    d1 = Decimal('0.1')
                    d2 = Decimal('0.2')
                    d3 = d1+d2    # 0.3
                    使用要求：
                        1：在创建Decimal实例对象时，要求浮点数必须以字符串的类型传递至Decimal构造函数，如果直接传入浮点数本身，那么在创建Decimal实例对象本身时就有可能已经出现精度不准；
                        2：Decimal实例本身可以和Decimal实例或者数值直接进行运算，但是如果计算双方是浮点数，为了避免得到一个不准确的计算结果，尽量使用Decimal实例和Decimal实例进行运算；
                        3：Decimal实例运算的结果仍然是一个Decimal实例；
                3：通过Decimal实例对象对浮点数进行四舍五入：
                    Decimal('1.2363').quantize(Decimal('0.00'))    # 1.24
                4：通过Decimal获取指定位数的浮点数运算结果：
                    getcontext().prec = 3    # 设置运算结果有效位数
                    Decimal(1)/Decimal(7)    # 计算获得浮点数运算结果
                    结果是0.143,相比float(1)/float(7)，得到的结果有效位数可以控制。
                5：通过Deciaml查看浮点数实际存储时的所有有效位数：
                    Decimal.from_float(1.233)
                    结果是：
                    1.233000000000000095923269327613525092601776123046875       
    4：浮点数类型转换：
        1：使用 float() 内置函数进行类型转换：
            float()函数可以将整数、浮点数字符串、布尔值转换为浮点数;
            注意：
                1：在转换浮点数字符串时，字符串只能是正/负整数字符串或者正/负浮点数字符串，不允许包含任何其他非数字字符；
                2：如果字符串中含有其他字符，或者无法转换为浮点数将会抛出 ValueError 异常；
                3：如果待转换变量值无法明确，那么在转换时务必处理该异常；
                
    5：关于浮点数的检测：
        1：浮点数类型检测
            1：可以使用 isinstance() 函数检测变量值是否是float类型：
                isinstance(var,float)  # 如果是浮点数类型将会返回True，如果不是浮点数类型将会返回False
                    
            2：可以使用 type() 函数检测变量值是否是float类型：
                type(var)  # 如果返回float，则为float类型，返回其他值则不是float类型；
                
        2：检测浮点数字符串：
            1：可以利用float失败时抛出ValueError来检测是否是float字符串：
            if str(var) != 'True' and str(var) != 'False' and !isinstance(var,int):
                try:
                    float(var)
                except ValueError as e:
                    return False
                else:
                    return True
                            
            2：使用正则表达式：
                re.match(r'[+-]?\d+[.]?\d+$')  # 如果返回None则表示未匹配到浮点数字符串，否则匹配到；       
                 
三：布尔值：
    1：python中的布尔值分别为True和False;Python中的布尔值只能是True和False，除此之外的写法均是非法字符；
    2：python语言中，''、""、空列表[]、空字典{}、空tuple(,)、空set、None、0等在条件运算中会被自动转换为布尔值False；
    3：布尔值也可以通过bool(var_name)内置函数将其他数据类型转换为布尔值；
    4：布尔值也可以通过int()和float()函数转换为整数和浮点数；
        True：转换为整数:1；转换为浮点数:1.0;
        False：转换为整数：0；转换为浮点数：0.0
    
四：空值：None：
    1：None表示空的概念，什么也没有，和值为空的某个具体数据类型不同，如：""、[]、{}等不同；在条件运算中，None会被自动转换为布尔值False；
    2：python中空记做None;只能是None，除此之外的任何其他形式都是非法字符；
    3：None是全局唯一的，即在Python解释器中只有一个None；如果有多个变量为None，那么这些变量的id值是相同的；
    
五：字符串：str
    1：字符串特征：
        1：python中表示字符串的数据类型为str，可以使用''或者""创建字符串；
        2：并且python中并无单独表示字符的数据类型，单个字符和单字符的字符串等价；
        3：python中的str在不同的python版本中表示不同的内容；在python2.x版本中，str表示二进制字节串；在python3.x版本中，str表示unicode字符串；
        4：因为字符编码的原因，python2.x版本中，在创建字符串时推荐使用u''或者u""的方式创建，表示unicode字符串；在python3.x版本中则可以直接创建，无需带上u前缀；
        5：字符串(比如：整数字符串和浮点数字符串)不允许直接和整数/浮点数进行算术/比较运算，否则将会报TypeError异常；
        6：str实现了__iter__方法，str类型属于可迭代对象；因此同样拥有可迭代对象基本特征：
            1：str中每一个字符都有序号，序号从左向右从0开始计数，序号从右向左从-1开始计数；
            2：str允许直接遍历得到字符串中的字符；
            3：str能够直接进行切片操作；
    2：常见的转义字符：
        1：python中的常用转义字符有以下几个:\r \n \t \v \\ \' \" \b \f
        2：转义字符反转义：
            对于单个转义字符需要反转义：则可以使用\\来反转义转义字符；如：\\r即表示\r；
            如果有较多转义字符需要反转义：则可以使用r""或者r''老包裹需要反转义的转义字符；
    3：字符串类型转换：(将其他数据类型转换为字符串类型)
        1：转换为str类型：
            通过str(var_name) 内置函数转换：
                1：对于布尔值True和False，转换完成之后将是"True"和"False"
                2：对于None值，转换完成之后将是"None"
                3：对于整数或者浮点数，转换完成之后将是数字字符串，负数的负号('-')会以字符的形式保留，但是正号('+')不会保留；
        2：转换为unicode类型：
            对于python2.x版本，需要先转换为str类型，再通过var_name.decode()解码为unicode类型。具体使用的解码规则和得到该二进制字节串时的编码规则相同；
            对于python3.x版本，str字符本身即为unicode类型，因此无需转换，可直接得到unicode字符串；
    4：字符串相关操作：
        1：获取字符串长度：使用len()内置函数
            len(str_var)
            说明：len()函数是内置函数，可以直接使用，可以返回对象(str,list,dict,set,tuple)的长度或者项目的个数

        2：连接字符串：
            str_var+str_var

        3：重复字符串：
            str_var*n

        4：字符串切片操作：
            1:获取第pos个位置的字符
                str_var[pos] 
            备注：1:pos如果为正数，则从右向左计算位置；pos如果为负数，则从左向右计算位置；   

            2:获取字符串中位置在start之后的字符(包括start位置)；
                str_var[start:]    
            备注：1：start无论是正数还是负数均表示一个位置，在取子串时都是从该位置起从左向右取值；

            3:获取字符串中位置在start和end之间的字符(包括start位置,不包括end位置)；
                str_var[start:end]    
            备注：1：因为切片操作取值时是按照从左向右的方向取值，因此start和end数值无论正负，start位置必须在end位置左边，否则将取不到子串；
            
            4:获取字符串中位置在start和end之间的字符，并按照step的步长取值，(包括start，不包括end)
                str_var[start:end:step]
            备注：1：因为切片操作取值时是按照从左向右的方向取值，因此start和end数值无论正负，start位置必须在end位置左边，否则将取不到子串；
        
        4：字符串中子串检测类操作：
            1：检测子串是否在字符串中:
                child_str in str_var
            备注：如果在则返回True，如果不在则返回False；

            2：检测子串是否不在字符串中
                child_str not in str_var 
            备注：如果不在则返回True，如果在则返回False；

            3：从左向右，在父串中查找子串首次出现的位置，直至串尾，如果找到，则返回首次出现的位置，否则返回-1    
                str_var.find(child_str)

            4：从右向左，在父串中查找子串首次出现的位置，直至串首，如果找到，则返回首次出现的位置，否则返回-1
                str_var.rfind(child_str)  

            5：在父串中的start_position处开始，从左向右查找子串首次出现的位置，直至串尾，如果找到返回目标在父串中的位置，如果未找到返回-1
                str_var.find(child_str,start_postion)    

            6：在父串中的start_position和end_position区间，从左向右查找子串首次出现的位置，如果找到返回目标在父串中的位置，如果未找到返回-1
                str_var.find(child_str,start_postion,end_position)
            
            7：检测字符串是否以指定子串开头
                str_var.startswith('start_str')

            8：检测字符串是否以指定子串结尾
                str_var.endswith('end_str')

        5：字符串替换类操作：
            1：替换str_var中的指定字符串，如果替换成功返回替换之后的字符串，原字符串保持不变,替换模式为全部替换；
                new_replace_str = str_var.str_replace("old_str","new_str")    

            2：替换str_var中指定的字符串，并指定替换次数，如果替换成功返回替换之后的字符串，原字符串保持不变；
                new_replace_str = str_var.str_replace("old_str","new_str",maxReplaceTimes)
        
        6：字符串格式化类操作：
            1：去除字符串左侧空格
                str_var.lstrip()

            2：去除字符串右侧空格
                str_var.rstrip()

            3：去除字符两侧空格
                str_var.strip()
            
            4：格式化字符串：
                python2.x和python3.x针对字符串有不同的格式化方式，推荐使用format来格式化字符串：
                1：format格式化字符串特点：
                    1：无需关注被格式化参数类型，无论何种类型都将被自动转为字符串类型；
                    2：填充方式灵活，支持按顺序填充，按数据序号填充，按关键字填充，按字典中的key来填充；单个参数也可以多次使用填充；
                2：基本语法：
                    "待替换字符串".format(格式化参数)  
                    说明：待替换字符串由自定义字符串和模板字符串组成，自定义字符串会被原样打印，模板字符串会被格式化参数替换;

                3：模板字符串：即{}构成的格式化占位符--{<参数填充位>:<格式控制符>}：
                    参数填充位(用来对应格式化参数)，有以下几种方式：
                        1：模板字符串中单纯使用{}来标识，格式化参数将会按照顺序填充标识位：
                            "python {} str {}".format("has","object")："python has str object"

                        2：在模板字符串的{}中指定序号，format()方法将会按照参数顺序和序号的对应关系来填充标识位：
                            "python {1} str {0}".format("object","has")："python has str object"
                        
                        3：在模板字符串的{}中使用关键字来标识，format()方法将会按照参数名称与标识位名称的对应关系来填充标识位：
                            "python {fa} str {fb}".format(fb="object", fa="has")："python has str object"
                        
                        4：在模板字符串的{}中用字典的key来标识，format()方法会按照字典的key与模板字符串中的key的对应关系来填充：
                            python_info = {'ia':'has','ib','object'}
                            "python {info[ia]} str {info[ib]}".format(info=python_info)
                    
                    格式控制符：用来对填充位填充的内容进行格式化
                        1：格式控制符用来对填充位填充的内容进行格式化，格式控制符需要以 : 和参数填充位的标识分隔开；如{1:.2f}、{:.2f}

                        2：格式控制符功能：
                            <填充> ：指用何种字符填充空白位置
                            <对齐> ：指输出的内容相对于空白位左、右、居中对齐，<左对齐，>右对齐，^居中对齐
                            <宽度> ：指当前标识位置输出宽度；
                            如：设置标识位置输出宽度为6位，并使用-来填充空白位置，标识位的内容右对齐：
                                "{:-<6} python".format("a")：a----- python
                                设置标识位置输出宽度为6位，并使用-来填充空白位置，标识位的内容居中对齐：
                                "{:-<6} python".format("a")：--a--- python

                            <,> ：数字的千位分隔符，适用于整数和浮点数，需要明确千分位是使用 , ；
                            <.精度> ：指浮点数小数部分的精度，或者字符串的最大输出宽度；
                            <类型> ：  b: 输出整数的二进制方式;
                                      c: 输出整数对应的Unicode字符;
                                      d: 输出整数的十进制方式;
                                      o: 输出整数的八进制方式;
                                      x:输出整数的小写十六进制方式;
                                      X:输出整数的大写十六进制方式;
                                      e: 输出浮点数对应的小写字母e的指数形式;
                                      E: 输出浮点数对应的大写字母E的指数形式;
                                      f: 输出浮点数的标准浮点形式;
                                      %: 输出浮点数的百分比形式;

                        3：上述格式控制字符可以根据需要组合使用，但是填充，对齐是建立在宽度的基础上；
                4：相关异常：        
                    1：在使用format()函数进行格式化时，如果参数个数/顺序无法与模板字符串中的标识位对应，将会抛出 IndexError 异常；因此在使用 format() 函数时务必处理该异常；
                 
            5：字符串类型检测：
                str.isalnum()               #是否全为字母或数字：
                str.isalpha()               #是否全字母：
                str.isdigit()               #是否全数字：
                str.islower()               #是否全小写：
                str.isupper()               #是否全大写：

            6：字符串大小写转换：
                str.upper()        #转换成大写
                str.lower()        #转换成小写
                str.swapcase()     #大小写切换
                str.title()        #每个单词的首字母大写
                str.capitalize()   #整个字符串的首字母大写

            7：分割字符串：
                split_list = str_var.split('split_str')
                说明：使用分割字符串:split_str来分割str_var,结果得到一个list;
            
            8：将一个数字按照字符编码转换为对应的字符：
                可以通过内置函数:chr(i)来实现；
                说明：1：该函数用来将一个数字根据对应的字符编码转换为字符，其使用的字符集是ASCII字符集，因此i的值只能在0~255之间；

            9：url字符串的编码与解码：
                1：dict和查询字符串互转：
                    将dict转为查询字符串：
                        对于python2:可以使用urllib中的urlencode()函数：
                            from urllib import urlencode
                            encode_res = urlencode({'name':'tom','age':23})
                            print encode_res    #age=23&name=tom
                        对于python3：可以使用urllib模块下的parse模块中的urlencode()函数
                            from urllib import parse
                            encode_res = parse.urlencode({'name':'tom','age':23})
                            print(encode_res)    #age=23&name=tom
                    将查询字符串转换为dict：
                        对于python3:可以使用urllib模块下的parse模块中的parse_qs函数转换：
                            from urllib import parse
                            decode_res = parse.parse_qs("name=tom&age=23")
                            print(decode_res)    {'name':'tom','age':23}
                
                2：对URL进行编码与解码
                    编码：
                        对于python2：可以使用urllib模块下的quote()函数对url编码；
                            from urllib import quote
                            encode_url = quote("http://abc.domain.com/中?姓=测试_姓")
                            print(encode_url)   #http%3A//abc.domain.com/%E4%B8%AD%3F%E5%A7%93%3D%E6%B5%8B%E8%AF%95_%E5%A7%93

                        对于python3：可以使用urllib模块下的parse模块的quote()函数编码；
                            from urllib import parse
                            encode_url = parse.quote("http://abc.domain.com/中?姓=测试_姓")
                            print(encode_url)   #http%3A//abc.domain.com/%E4%B8%AD%3F%E5%A7%93%3D%E6%B5%8B%E8%AF%95_%E5%A7%93

                    解码：
                        对于python2：可以使用urllib模块下的unquote()函数解码；
                            from urllib import quote
                            encode_url = quote("http%3A//abc.domain.com/%E4%B8%AD%3F%E5%A7%93%3D%E6%B5%8B%E8%AF%95_%E5%A7%93")
                            print(encode_url)   #http://abc.domain.com/中?姓=测试_姓

                        对于python3：可以使用urllib模块下的parse模块的unquote()函数解码；
                            from urllib import parse
                            decode_url = parse.unquote("http%3A//abc.domain.com/%E4%B8%AD%3F%E5%A7%93%3D%E6%B5%8B%E8%AF%95_%E5%A7%93")
                            print(decode_url)   #http://abc.domain.com/中?姓=测试_姓
            
            10：对html标签进行转换：
                对于python2可以使用如下方式：
                    #将HTML实体转换为HTML标签:html_str = '&lt;div&gt;'
                    import HTMLParser
                    html_parser = HTMLParser.HTMLParser()
                    html = html_parser.unescape(html_str)   #'&lt;div&gt;' => '<div>'

                    #将HTML标签转换为HTML实体：html_str = "<div>"
                    import cgi
                    txt = cgi.escape(html_str)   #  '<div>' => '&lt;div&gt;'
            
                对于python3则统一使用以下方式：html_str = '&lt;div&gt;'
                    #将HTML实体转换为HTML标签：
                    import html
                    html.unescape(html_str)    #"<div>"

                    #将HTML标签转换为HTML实体：
                    import html
                    html.escape(html_str)    #"&lt;div&gt;"